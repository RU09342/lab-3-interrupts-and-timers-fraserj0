#include <msp430.h>
/**
 * ButtonInterrupt
 */
int ButtonInterrupt(void)
{
    WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
    P1OUT &= 0x00;
    P1DIR &= 0x00;
    P1DIR |= 0x41; // Set P1.0 to output direction
    P1REN |= 0x08;
    P1OUT |= 0x08;
    P1IE  = 0x08; // P1.3 interrupt enabled                      //interrupt is enabled here, as well as interrupt clear
    P1IES |= 0x08;
    P1IFG &= ~BIT3; // P1.3 IFG cleared
    _BIS_SR(LPM4_bits + GIE); // Enter LPM4 w/interrupt

}

// Port 1 interrupt service routine
#pragma vector=PORT1_VECTOR             //This is what happens when you enter the interrupt
__interrupt void Port_1(void)
{
    /**
    //ButtonInterrupt
    unsigned int i;
    P1OUT  ^=  0x41; // P1.0 = toggle
    for(i = 0; i<50000; i++);
    P1IFG  &= ~BIT3; // P1.3 IFG cleared
    */

    //ButtonBasedDelayInterrupt
    unsigned int i;
    int time = 0;
    TA0R   = 0x0000;
    unsigned int loop =1;

    while(P1IES &= 0x08)
    {
        if (P1IN &= 0x08)
        {
            P1IES &=0xF7;
        }

        else
        {
            P1OUT  = 0x40;
            for(i  = 0; i<50000; i++);
            TACTL  = TASSEL_2 + MC_2 + ID_3;
            loop = 0;
        }
    time  = TA0R;
    CCR0  = time;
    P1OUT &= 0x08;
    P1IFG &= ~BIT3; // P1.3 IFG cleared
}


